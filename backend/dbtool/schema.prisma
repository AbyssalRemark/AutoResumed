generator client {
  provider             = "prisma-client-py"
  recursive_type_depth = 5
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         BigInt      @id @default(autoincrement())
  created_at DateTime    @default(now())
  email      String      @unique
  pass_hash   String     
  salt       String      @db.Char(10)
  resume     Resume?
  authorized Authorized?
}

model Resume {
  id            BigInt        @id @default(autoincrement())
  belongs_to_id BigInt        @unique
  belongs_to    User          @relation(fields: [belongs_to_id], references: [id], onDelete: Cascade)
  created_at    DateTime      @default(now())
  basic         Basic?
  work          Work[]
  volunteer     Volunteer[]
  education     Education[]
  award         Award[]
  certificate   Certificate[]
  publication   Publication[]
  skill         Skill[]
  language      Language[]
  interest      Interest[]
  reference     Reference[]
  project       Project[]
  tags          String[]
}

model Basic {
  id            BigInt    @id @default(autoincrement())
  belongs_to_id BigInt    @unique
  belongs_to    Resume    @relation(fields: [belongs_to_id], references: [id], onDelete: Cascade)
  created_at    DateTime  @default(now())
  name          String
  label         Label[]
  image         String
  email         String
  phone         String
  url           String
  summary       Summary[]
  location      Location?
  profiles      Profile[]
}

model Label {
  id            BigInt   @id @default(autoincrement())
  belongs_to_id BigInt
  belongs_to    Basic    @relation(fields: [belongs_to_id], references: [id], onDelete: Cascade)
  created_at    DateTime @default(now())
  tags          String[]
  label         String
}

model Summary {
  id            BigInt   @id @default(autoincrement())
  belongs_to_id BigInt
  belongs_to    Basic    @relation(fields: [belongs_to_id], references: [id], onDelete: Cascade)
  created_at    DateTime @default(now())
  tags          String[]
  summary       String
}

model Location {
  id            BigInt   @id @default(autoincrement())
  belongs_to_id BigInt   @unique
  belongs_to    Basic    @relation(fields: [belongs_to_id], references: [id], onDelete: Cascade)
  created_at    DateTime @default(now())
  address       String
  postal_code   String
  city          String
  country_code  String
  region        String
}

model Profiles {
  id            BigInt   @id @default(autoincrement())
  belongs_to_id BigInt
  belongs_to    Basic    @relation(fields: [belongs_to_id], references: [id], onDelete: Cascade)
  created_at    DateTime @default(now())
  tags          String[]
  network       String
  username      String
  url           String
}

model Work {
  id            BigInt   @id @default(autoincrement())
  belongs_to_id BigInt
  belongs_to    Resume   @relation(fields: [belongs_to_id], references: [id], onDelete: Cascade)
  created_at    DateTime @default(now())
  tags          String[]
  name          String
  position      String
  url           String
  start_date    String
  end_date      String
  summary       String
  highlights    String[]
}

model Volunteer {
  id            BigInt   @id @default(autoincrement())
  belongs_to_id BigInt
  belongs_to    Resume   @relation(fields: [belongs_to_id], references: [id], onDelete: Cascade)
  created_at    DateTime @default(now())
  tags          String[]
  organization  String
  position      String
  url           String
  start_date    String
  end_date      String
  summary       String
  highlights    String[]
}

model Education {
  id            BigInt   @id @default(autoincrement())
  belongs_to_id BigInt
  belongs_to    Resume   @relation(fields: [belongs_to_id], references: [id], onDelete: Cascade)
  created_at    DateTime @default(now())
  tags          String[]
  institution   String
  url           String
  area          String
  study_type    String
  start_date    String
  end_date      String
  score         String
  courses       String[]
}

model Award {
  id            BigInt   @id @default(autoincrement())
  belongs_to_id BigInt
  belongs_to    Resume   @relation(fields: [belongs_to_id], references: [id], onDelete: Cascade)
  created_at    DateTime @default(now())
  tags          String[]
  title         String
  date          String
  awader        String
  summary       String
}

model Certificate {
  id            BigInt   @id @default(autoincrement())
  belongs_to_id BigInt
  belongs_to    Resume   @relation(fields: [belongs_to_id], references: [id], onDelete: Cascade)
  created_at    DateTime @default(now())
  tags          String[]
  name          String
  date          String
  issuer        String
  url           String
}

model Publication {
  id            BigInt   @id @default(autoincrement())
  belongs_to_id BigInt
  belongs_to    Resume   @relation(fields: [belongs_to_id], references: [id], onDelete: Cascade)
  created_at    DateTime @default(now())
  tags          String[]
  name          String
  publisher     String
  release_date  String
  url           String
  summary       String
}

model Skill {
  id            BigInt   @id @default(autoincrement())
  belongs_to_id BigInt
  belongs_to    Resume   @relation(fields: [belongs_to_id], references: [id], onDelete: Cascade)
  created_at    DateTime @default(now())
  tags          String[]
  name          String
  level         String
  keywords      String[]
}

model Language {
  id            BigInt   @id @default(autoincrement())
  belongs_to_id BigInt
  belongs_to    Resume   @relation(fields: [belongs_to_id], references: [id], onDelete: Cascade)
  created_at    DateTime @default(now())
  tags          String[]
  language      String
  fluency       String
}

model Interest {
  id            BigInt   @id @default(autoincrement())
  belongs_to_id BigInt
  belongs_to    Resume   @relation(fields: [belongs_to_id], references: [id], onDelete: Cascade)
  created_at    DateTime @default(now())
  tags          String[]
  name          String
  keywords      String[]
}

model Reference {
  id            BigInt   @id @default(autoincrement())
  belongs_to_id BigInt
  belongs_to    Resume   @relation(fields: [belongs_to_id], references: [id], onDelete: Cascade)
  created_at    DateTime @default(now())
  tags          String[]
  name          String
  reference     String
}

model Project {
  id            BigInt   @id @default(autoincrement())
  belongs_to_id BigInt
  belongs_to    Resume   @relation(fields: [belongs_to_id], references: [id], onDelete: Cascade)
  created_at    DateTime @default(now())
  tags          String[]
  name          String
  start_date    String
  end_date      String
  description   String
  highlights    String[]
  url           String
}

model Authorized {
  id            BigInt   @id @default(autoincrement())
  belongs_to_id BigInt   @unique
  belongs_to    User     @relation(fields: [belongs_to_id], references: [id], onDelete: Cascade)
  created_at    DateTime @default(now())
  last_accessed DateTime @updatedAt
  token         String   @unique
}
